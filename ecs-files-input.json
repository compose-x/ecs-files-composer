{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "typeName": "input",
  "description": "Configuration input definition for ECS Files Composer",
  "properties": {
    "files": {
      "type": "object",
      "uniqueItems": true,
      "patternProperties": {
        "^/[\\x00-\\x7F]+$": {
          "$ref": "#/definitions/FileDef"
        }
      }
    },
    "certificates": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "x509": {
          "patternProperties": {
            "^/[\\x00-\\x7F]+$": {
              "$ref": "#/definitions/X509CertDef"
            }
          }
        }
      }
    },
    "certbot_store": {
      "type": "object",
      "uniqueItems": true,
      "patternProperties": {
        "[\\W\\-\\.]+$": {
          "$ref": "#/definitions/CertbotAwsStoreCertificate"
        }
      }
    },
    "IamOverride": {
      "type": "object",
      "$ref": "#/definitions/IamOverrideDef"
    }
  },
  "definitions": {
    "S3Uri": {
      "type": "string",
      "description": "s3://bucket-name/path/to/file simple syntax. Does not support IamOverride",
      "pattern": "^s3://([a-zA-Z\\d\\-.]+)/([\\S]+)$"
    },
    "ComposeXUri": {
      "type": "string",
      "description": "bucket_name::path/to/file format used in other compose-x projects",
      "pattern": "([a-zA-Z\\-\\d.]+)::([\\S]+)$"
    },
    "FileDef": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "path": {
          "type": "string"
        },
        "content": {
          "type": "string",
          "description": "The raw content of the file to use"
        },
        "source": {
          "$ref": "#/definitions/SourceDef"
        },
        "encoding": {
          "type": "string",
          "enum": [
            "base64",
            "plain"
          ],
          "default": "plain"
        },
        "group": {
          "type": "string",
          "description": "UNIX group name or GID owner of the file. Default to root(0)",
          "default": "root"
        },
        "owner": {
          "type": "string",
          "description": "UNIX user or UID owner of the file. Default to root(0)",
          "default": "root"
        },
        "mode": {
          "type": "string",
          "description": "UNIX file mode",
          "default": "0644"
        },
        "context": {
          "type": "string",
          "enum": [
            "plain",
            "jinja2"
          ],
          "default": "plain"
        },
        "ignore_failure": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "commands": {
                  "type": "boolean",
                  "default": false,
                  "description": "Ignore if any of the commands failed"
                },
                "mode": {
                  "type": "boolean",
                  "default": false,
                  "description": "Ignore if `mode` (using chmod) failed."
                },
                "owner": {
                  "type": "boolean",
                  "default": false,
                  "description": "Ignore if `owner` (using chown) failed"
                },
                "source_download": {
                  "type": "boolean",
                  "default": false,
                  "description": "Ignore if a Source download failed. Any subsequent action is cancelled."
                }
              }
            },
            {
              "type": "boolean",
              "description": "Ignore if any step fails (download, transform, commands etc.)"
            }
          ]
        },
        "commands": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "post": {
              "$ref": "#/definitions/CommandsDef",
              "description": "Commands to run after the file was retrieved"
            },
            "pre": {
              "$ref": "#/definitions/CommandsDef",
              "description": "Commands executed prior to the file being fetched, after `depends_on` completed"
            }
          }
        }
      }
    },
    "SourceDef": {
      "type": "object",
      "properties": {
        "Url": {
          "$ref": "#/definitions/UrlDef"
        },
        "Ssm": {
          "$ref": "#/definitions/SsmDef"
        },
        "S3": {
          "$ref": "#/definitions/S3Def"
        },
        "Secret": {
          "$ref": "#/definitions/SecretDef"
        }
      }
    },
    "UrlDef": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string",
          "format": "uri"
        },
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        }
      }
    },
    "SsmDef": {
      "type": "object",
      "properties": {
        "ParameterName": {
          "type": "string"
        },
        "IamOverride": {
          "$ref": "#/definitions/IamOverrideDef"
        }
      }
    },
    "SecretDef": {
      "type": "object",
      "required": [
        "SecretId"
      ],
      "properties": {
        "SecretId": {
          "type": "string"
        },
        "VersionId": {
          "type": "string"
        },
        "VersionStage": {
          "type": "string"
        },
        "JsonKey": {
          "type": "string",
          "description": "If the SecretString is a valid JSON, use the Key to map to the value stored in secret"
        },
        "IamOverride": {
          "$ref": "#/definitions/IamOverrideDef"
        }
      }
    },
    "S3Def": {
      "type": "object",
      "oneOf": [
        {
          "required": [
            "BucketName",
            "Key"
          ]
        },
        {
          "required": [
            "S3Uri"
          ]
        },
        {
          "required": [
            "ComposeXUri"
          ]
        }
      ],
      "properties": {
        "S3Uri": {
          "$ref": "#/definitions/S3Uri"
        },
        "ComposeXUri": {
          "$ref": "#/definitions/ComposeXUri"
        },
        "BucketName": {
          "type": "string",
          "description": "Name of the S3 Bucket"
        },
        "BucketRegion": {
          "type": "string",
          "description": "S3 Region to use. Default will ignore or retrieve via s3:GetBucketLocation"
        },
        "Key": {
          "type": "string",
          "description": "Full path to the file to retrieve"
        },
        "IamOverride": {
          "$ref": "#/definitions/IamOverrideDef"
        }
      }
    },
    "IamOverrideDef": {
      "type": "object",
      "description": "When source points to AWS, allows to indicate if another role should be used",
      "properties": {
        "RoleArn": {
          "type": "string"
        },
        "SessionName": {
          "type": "string",
          "default": "S3File@EcsConfigComposer",
          "description": "Name of the IAM session"
        },
        "ExternalId": {
          "type": "string",
          "description": "The External ID to use when using sts:AssumeRole"
        },
        "RegionName": {
          "type": "string"
        },
        "AccessKeyId": {
          "type": "string",
          "description": "AWS Access Key Id to use for session"
        },
        "SecretAccessKey": {
          "type": "string",
          "description": "AWS Secret Key to use for session"
        },
        "SessionToken": {
          "type": "string"
        }
      }
    },
    "CommandsDef": {
      "type": "array",
      "description": "List of commands to run",
      "items": {
        "type": "string",
        "description": "Shell command to run"
      }
    },
    "X509CertDef": {
      "type": "object",
      "additionalProperties": true,
      "required": [
        "certFileName",
        "keyFileName"
      ],
      "properties": {
        "dir_path": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string",
          "format": "idn-email",
          "default": "files-composer@compose-x.tld"
        },
        "commonName": {
          "type": "string",
          "format": "hostname"
        },
        "countryName": {
          "type": "string",
          "pattern": "^[A-Z]+$",
          "default": "ZZ"
        },
        "localityName": {
          "type": "string",
          "default": "Anywhere"
        },
        "stateOrProvinceName": {
          "type": "string",
          "default": "Shire"
        },
        "organizationName": {
          "type": "string",
          "default": "NoOne"
        },
        "organizationUnitName": {
          "type": "string",
          "default": "Automation"
        },
        "validityEndInSeconds": {
          "type": "number",
          "default": 8035200,
          "description": "Validity before cert expires, in seconds. Default 3*31*24*60*60=3Months"
        },
        "keyFileName": {
          "type": "string"
        },
        "certFileName": {
          "type": "string"
        },
        "group": {
          "type": "string",
          "description": "UNIX group name or GID owner of the file. Default to root(0)",
          "default": "root"
        },
        "owner": {
          "type": "string",
          "description": "UNIX user or UID owner of the file. Default to root(0)",
          "default": "root"
        },
        "jksConfig": {
          "description": "Configuration that will allow to transform the certificate into a JKS for java applications",
          "type": "object",
          "additionalProperties": false,
          "required": [
            "fileName",
            "passphrase"
          ],
          "properties": {
            "fileName": {
              "type": "string",
              "description": "Name of the JKS file to create"
            },
            "passphrase": {
              "type": "string",
              "description": "The passphrase to use to secure the jks and certificate"
            }
          }
        }
      }
    },
    "CertbotAwsStoreCertificate": {
      "type": "object",
      "required": [
        "storage_path"
      ],
      "properties": {
        "storage_path": {
          "type": "string",
          "pattern": "^/[\\x00-\\x7F]+$",
          "description": "path to folder to store the certbot certificates into."
        },
        "table_name": {
          "type": "string",
          "description": "dynamodb table name of the certbot-aws-store registry",
          "default": "certbot-registry"
        },
        "table_region_name": {
          "type": "string",
          "description": "Region in which the table_name is. Defaults to profile default region, or eu-west-1"
        }
      }
    }
  },
  "anyOf": [
    {
      "required": [
        "files"
      ]
    },
    {
      "required": [
        "certbot_store"
      ]
    },
    {
      "required": [
        "certificates"
      ]
    }
  ]
}
