# generated by datamodel-codegen:
#   filename:  ecs-files-input.json
#   timestamp: 2022-05-18T06:23:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import AnyUrl, BaseModel, EmailStr, Extra, Field, constr


class Encoding(Enum):
    base64 = "base64"
    plain = "plain"


class Context(Enum):
    plain = "plain"
    jinja2 = "jinja2"


class UrlDef(BaseModel):
    url: AnyUrl | None = Field(None, alias="Url")
    username: str | None = Field(None, alias="Username")
    password: str | None = Field(None, alias="Password")


class IamOverrideDef(BaseModel):
    role_arn: str | None = Field(None, alias="RoleArn")
    session_name: str | None = Field(
        "S3File@EcsConfigComposer",
        alias="SessionName",
        description="Name of the IAM session",
    )
    external_id: str | None = Field(
        None,
        alias="ExternalId",
        description="The External ID to use when using sts:AssumeRole",
    )
    region_name: str | None = Field(None, alias="RegionName")
    access_key_id: str | None = Field(
        None, alias="AccessKeyId", description="AWS Access Key Id to use for session"
    )
    secret_access_key: str | None = Field(
        None, alias="SecretAccessKey", description="AWS Secret Key to use for session"
    )
    session_token: str | None = Field(None, alias="SessionToken")


class CommandsDef(BaseModel):
    __root__: list[str] = Field(..., description="List of commands to run")


class X509CertDef(BaseModel):
    class Config:
        extra = Extra.allow

    dir_path: str | None = None
    email_address: EmailStr | None = Field(
        "files-composer@compose-x.tld", alias="emailAddress"
    )
    common_name: None | (
        constr(
            regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
        )
    ) = Field(None, alias="commonName")
    country_name: str | None = Field("AW", alias="countryName", regex="^[A-Z]+$")
    locality_name: str | None = Field("AWS", alias="localityName")
    state_or_province_name: str | None = Field("AWS", alias="stateOrProvinceName")
    organization_name: str | None = Field("AWS", alias="organizationName")
    organization_unit_name: str | None = Field("AWS", alias="organizationUnitName")
    validity_end_in_seconds: float | None = Field(
        8035200,
        alias="validityEndInSeconds",
        description="Validity before cert expires, in seconds. Default 3*31*24*60*60=3Months",
    )
    key_file_name: str = Field(..., alias="keyFileName")
    cert_file_name: str = Field(..., alias="certFileName")
    group: str | None = Field(
        "root",
        description="UNIX group name or GID owner of the file. Default to root(0)",
    )
    owner: str | None = Field(
        "root", description="UNIX user or UID owner of the file. Default to root(0)"
    )


class Certificates(BaseModel):
    class Config:
        extra = Extra.forbid

    x509: dict[str, X509CertDef] | None = None


class Commands(BaseModel):
    post: CommandsDef | None = Field(
        None, description="Commands to run after the file was retrieved"
    )
    pre: CommandsDef | None = Field(
        None,
        description="Commands executed prior to the file being fetched, after `depends_on` completed",
    )


class SsmDef(BaseModel):
    parameter_name: str | None = Field(None, alias="ParameterName")
    iam_override: IamOverrideDef | None = Field(None, alias="IamOverride")


class SecretDef(BaseModel):
    secret_id: str = Field(..., alias="SecretId")
    version_id: str | None = Field(None, alias="VersionId")
    version_stage: str | None = Field(None, alias="VersionStage")
    iam_override: IamOverrideDef | None = Field(None, alias="IamOverride")


class S3Def(BaseModel):
    bucket_name: str = Field(
        ..., alias="BucketName", description="Name of the S3 Bucket"
    )
    bucket_region: str | None = Field(
        None,
        alias="BucketRegion",
        description="S3 Region to use. Default will ignore or retrieve via s3:GetBucketLocation",
    )
    key: str = Field(..., alias="Key", description="Full path to the file to retrieve")
    iam_override: IamOverrideDef | None = Field(None, alias="IamOverride")


class SourceDef(BaseModel):
    url: UrlDef | None = Field(None, alias="Url")
    ssm: SsmDef | None = Field(None, alias="Ssm")
    s3: S3Def | None = Field(None, alias="S3")
    secret: SecretDef | None = Field(None, alias="Secret")


class FileDef(BaseModel):
    class Config:
        extra = Extra.allow

    path: str | None = None
    content: str | None = Field(None, description="The raw content of the file to use")
    source: SourceDef | None = None
    encoding: Encoding | None = "plain"
    group: str | None = Field(
        "root",
        description="UNIX group name or GID owner of the file. Default to root(0)",
    )
    owner: str | None = Field(
        "root", description="UNIX user or UID owner of the file. Default to root(0)"
    )
    mode: str | None = Field("0644", description="UNIX file mode")
    context: Context | None = "plain"
    ignore_if_failed: bool | None = Field(
        False,
        description="Whether or not the failure to retrieve the file should stop the execution",
    )
    commands: Commands | None = None


class Model(BaseModel):
    files: dict[str, FileDef]
    certificates: Certificates | None = None
    iam_override: IamOverrideDef | None = Field(None, alias="IamOverride")
