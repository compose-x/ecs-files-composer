# generated by datamodel-codegen:
#   filename:  ecs-files-input.json
#   timestamp: 2021-07-16T13:56:02+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field


class Encoding(Enum):
    base64 = 'base64'
    plain = 'plain'


class Context(Enum):
    plain = 'plain'
    jinja2 = 'jinja2'


class UrlDef(BaseModel):
    url: Optional[AnyUrl] = Field(None, alias='Url')
    username: Optional[str] = Field(None, alias='Username')
    password: Optional[str] = Field(None, alias='Password')


class IamOverrideDef(BaseModel):
    role_arn: Optional[str] = Field(None, alias='RoleArn')
    session_name: Optional[str] = Field(
        'S3File@EcsConfigComposer', alias='SessionName', description='Name of the IAM session'
    )
    external_id: Optional[str] = Field(
        None, alias='ExternalId', description='The External ID to use when using sts:AssumeRole'
    )
    region_name: Optional[str] = Field(None, alias='RegionName')


class CommandsDef(BaseModel):
    __root__: List[str] = Field(..., description='List of commands to run')


class Model(BaseModel):
    files: Dict[str, Any]
    iam_override: Optional[IamOverrideDef] = Field(None, alias='IamOverride')


class Commands(BaseModel):
    post: Optional[CommandsDef] = Field(None, description='Commands to run after the file was retrieved')
    pre: Optional[CommandsDef] = Field(
        None, description='Commands executed prior to the file being fetched, after `depends_on` completed'
    )


class SsmDef(BaseModel):
    parameter_name: Optional[str] = Field(None, alias='ParameterName')
    iam_override: Optional[IamOverrideDef] = Field(None, alias='IamOverride')


class SecretDef(BaseModel):
    secret_id: str = Field(..., alias='SecretId')
    version_id: Optional[str] = Field(None, alias='VersionId')
    version_stage: Optional[str] = Field(None, alias='VersionStage')
    iam_override: Optional[IamOverrideDef] = Field(None, alias='IamOverride')


class S3Def(BaseModel):
    bucket_name: str = Field(..., alias='BucketName', description='Name of the S3 Bucket')
    bucket_region: Optional[str] = Field(
        None,
        alias='BucketRegion',
        description='S3 Region to use. Default will ignore or retrieve via s3:GetBucketLocation',
    )
    key: str = Field(..., alias='Key', description='Full path to the file to retrieve')
    iam_override: Optional[IamOverrideDef] = Field(None, alias='IamOverride')


class SourceDef(BaseModel):
    url: Optional[UrlDef] = Field(None, alias='Url')
    ssm: Optional[SsmDef] = Field(None, alias='Ssm')
    s3: Optional[S3Def] = Field(None, alias='S3')
    secret: Optional[SecretDef] = Field(None, alias='Secret')


class FileDef(BaseModel):
    path: Optional[str] = None
    content: Optional[str] = Field(None, description='The raw content of the file to use')
    source: Optional[SourceDef] = None
    encoding: Optional[Encoding] = 'plain'
    group: Optional[str] = Field('root', description='UNIX group name or GID owner of the file. Default to root(0)')
    owner: Optional[str] = Field('root', description='UNIX user or UID owner of the file. Default to root(0)')
    mode: Optional[str] = Field('0644', description='UNIX file mode')
    context: Optional[Context] = 'plain'
    ignore_if_failed: Optional[bool] = Field(
        False, description='Whether or not the failure to retrieve the file should stop the execution'
    )
    commands: Optional[Commands] = None
